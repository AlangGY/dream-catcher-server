---
description: 
globs: 
alwaysApply: true
---
# Module Architecture Guide

## 모듈 레이어 구조
각 모듈은 다음과 같은 레이어 구조를 따릅니다:

```
Controller (API Layer)
    ↓
Service (Business Logic Layer)
    ↓
Repository (Data Access Layer)
```

## 책임과 역할

### Controller Layer
- HTTP 요청/응답 처리
- 요청 데이터 유효성 검증 (DTO 활용)
- 서비스 레이어 호출
- 응답 데이터 포맷팅

예시: [auth.controller.ts](mdc:src/auth/auth.controller.ts)
```typescript
@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('login')
  async login(@Body() loginDto: LoginRequestDto): Promise<AuthResponseDto> {
    return this.authService.login(loginDto);
  }
}
```

### Service Layer
- 비즈니스 로직 구현
- 트랜잭션 관리
- 여러 Repository 조합
- 도메인 규칙 적용

예시: [auth.service.ts](mdc:src/auth/auth.service.ts)
```typescript
@Injectable()
export class AuthService implements IAuthService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    private readonly jwtService: JwtService,
  ) {}

  async login(loginDto: LoginRequestDto): Promise<AuthResponseDto> {
    // 비즈니스 로직 구현
  }
}
```

### Repository Layer
- 데이터베이스 접근 로직
- TypeORM Entity 정의
- 쿼리 작성 및 실행

예시: [user.entity.ts](mdc:src/auth/entities/user.entity.ts)

## 모듈간 통신
- 모듈간 의존성은 Module 클래스에서 명시적으로 정의
- 순환 참조 금지
- 필요한 경우 이벤트 기반 통신 사용

## 데이터 흐름
1. HTTP Request → DTO (데이터 유효성 검증)
2. Controller → Service (비즈니스 로직 처리)
3. Service → Repository (데이터 접근)
4. Repository → Database
5. Database → Repository → Service → Controller
6. Controller → Response DTO → HTTP Response

